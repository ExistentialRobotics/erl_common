from typing import List
from typing import Union
from typing import overload
from typing import Callable
import numpy as np
import numpy.typing as npt

__all__ = [
    "compute_c_strides",
    "compute_f_strides",
    "GridMapInfoXd",
    "GridMapInfo2D",
    "GridMapInfo3D",
    "TensorDouble2D",
    "TensorDouble3D",
    "TensorDoubleXd",
    "TensorInt2D",
    "TensorInt3D",
    "TensorIntXd",
    "TensorUnsigned2D",
    "TensorUnsigned3D",
    "TensorUnsignedXd",
    "GridMapDouble2D",
    "GridMapInt2D",
    "GridMapUnsigned2D",
    "GridMapDouble3D",
    "GridMapInt3D",
    "GridMapUnsigned3D",
    "GridMapDoubleXd",
    "GridMapIntXd",
    "GridMapUnsignedXd",
    "GridMapDrawer2D",
]

@overload
def compute_c_strides(shape: List[int], item_size: int) -> List[int]: ...
@overload
def compute_c_strides(shape: npt.NDArray[np.int32], item_size: int) -> npt.NDArray[np.int32]: ...
@overload
def compute_f_strides(shape: List[int], item_size: int): ...
@overload
def compute_f_strides(shape: npt.NDArray[np.int32], item_size: int) -> npt.NDArray[np.int32]: ...

class GridMapInfoTemplate:
    @overload
    def __init__(
        self: GridMapInfoTemplate,
        min: npt.NDArray[np.float64],
        max: npt.NDArray[np.float64],
        resolution: npt.NDArray[np.float64],
        padding: npt.NDArray[np.int32],
    ) -> None: ...
    @overload
    def __init__(
        self: GridMapInfoTemplate,
        map_shape: npt.NDArray[np.int32],
        min: npt.NDArray[np.float64],
        max: npt.NDArray[np.float64],
    ) -> None: ...
    @overload
    def extend(self: GridMapInfoTemplate, size: int, min: float, max: float, dim: int) -> GridMapInfoTemplate: ...
    @overload
    def extend(
        self: GridMapInfoTemplate, min: float, max: float, resolution: float, padding: int, dim: int
    ) -> GridMapInfoTemplate: ...
    def squeeze(self: GridMapInfoTemplate, dim: int) -> GridMapInfoTemplate: ...
    @property
    def dims(self: GridMapInfoTemplate) -> int: ...
    @property
    def shape(self: GridMapInfoTemplate) -> npt.NDArray[np.int32]: ...
    def shape_at(self: GridMapInfoTemplate, dim: int) -> int: ...
    @property
    def size(self: GridMapInfoTemplate) -> int: ...
    @property
    def height(self: GridMapInfoTemplate) -> int: ...
    @property
    def width(self: GridMapInfoTemplate) -> int: ...
    @property
    def length(self: GridMapInfoTemplate) -> int: ...
    @property
    def min(self: GridMapInfoTemplate) -> npt.NDArray[np.float64]: ...
    def min_at(self: GridMapInfoTemplate, dim: int) -> float: ...
    @property
    def max(self: GridMapInfoTemplate) -> npt.NDArray[np.float64]: ...
    def max_at(self: GridMapInfoTemplate, dim: int) -> float: ...
    @property
    def resolution(self: GridMapInfoTemplate) -> npt.NDArray[np.float64]: ...
    def resolution_at(self: GridMapInfoTemplate, dim: int) -> float: ...
    @property
    def center(self: GridMapInfoTemplate) -> npt.NDArray[np.float64]: ...
    @property
    def center_grid(self: GridMapInfoTemplate) -> npt.NDArray[np.int32]: ...
    def get_dim_lin_space(self: GridMapInfoTemplate, dim: int) -> npt.NDArray[np.float64]: ...
    def grid_to_meter_for_value(self: GridMapInfoTemplate, grid_value: int, dim: int) -> float: ...
    def grid_to_meter_for_values(
        self: GridMapInfoTemplate, grid_values: npt.NDArray[np.int32], dim: int
    ) -> npt.NDArray[np.float64]: ...
    def meter_to_grid_for_value(self: GridMapInfoTemplate, meter_value: float, dim: int) -> int: ...
    def meter_to_grid_for_values(
        self: GridMapInfoTemplate, meter_values: npt.NDArray[np.float64], dim: int
    ) -> npt.NDArray[np.int32]: ...
    def grid_to_meter_for_points(
        self: GridMapInfoTemplate, grid_points: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.float64]: ...
    def meter_to_grid_for_points(
        self: GridMapInfoTemplate, meter_points: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.int32]: ...
    def grid_to_meter_for_vectors(
        self: GridMapInfoTemplate, grid_vectors: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.float64]: ...
    def meter_to_grid_for_vectors(
        self: GridMapInfoTemplate, meter_vectors: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.int32]: ...
    def in_map(self: GridMapInfoTemplate, meter_point: npt.NDArray[np.float64]) -> bool: ...
    def in_grids(self: GridMapInfoTemplate, grid_point: npt.NDArray[np.int32]) -> bool: ...
    def grid_to_index(self: GridMapInfoTemplate, grid: npt.NDArray[np.int32], c_stride: bool) -> int: ...
    def index_to_grid(self: GridMapInfoTemplate, index: int, c_stride: bool) -> npt.NDArray[np.int32]: ...
    def generate_grid_coordinates(self: GridMapInfoTemplate, c_stride: bool) -> npt.NDArray[np.int32]: ...
    def generate_meter_coordinates(self: GridMapInfoTemplate, c_stride: bool) -> npt.NDArray[np.float64]: ...

class GridMapInfo2D(GridMapInfoTemplate):
    def grid_to_pixel_for_points(self: GridMapInfo2D, grid_points: npt.NDArray[np.int32]) -> npt.NDArray[np.int32]: ...
    def pixel_to_grid_for_points(self: GridMapInfo2D, pixel_points: npt.NDArray[np.int32]) -> npt.NDArray[np.int32]: ...
    def meter_to_pixel_for_points(
        self: GridMapInfo2D, meter_points: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.int32]: ...
    def pixel_to_meter_for_points(
        self: GridMapInfo2D, pixel_points: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.float64]: ...
    def grid_to_pixel_for_vectors(
        self: GridMapInfo2D, grid_vectors: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...
    def pixel_to_grid_for_vectors(
        self: GridMapInfo2D, pixel_vectors: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...
    def meter_to_pixel_for_vectors(
        self: GridMapInfo2D, meter_vectors: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.int32]: ...
    def pixel_to_meter_for_vectors(
        self: GridMapInfo2D, pixel_vectors: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.float64]: ...
    def pixel_to_index(self: GridMapInfo2D, pixel: npt.NDArray[np.int32], c_stride: bool) -> int: ...
    def index_to_pixel(self: GridMapInfo2D, index: int, c_stride: bool) -> npt.NDArray[np.int32]: ...
    def get_metric_coordinates_of_filled_metric_polygon(
        self: GridMapInfo2D, polygon_metric_vertices: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.float64]: ...
    def get_grid_coordinates_of_filled_grid_polygon(
        self: GridMapInfo2D, polygon_grid_vertices: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...
    def get_pixel_coordinates_of_filled_pixel_polygon(
        self: GridMapInfo2D, polygon_pixel_vertices: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...

class GridMapInfo3D(GridMapInfoTemplate): ...

class GridMapInfoXd(GridMapInfoTemplate):
    def grid_to_pixel_for_points(self: GridMapInfoXd, grid_points: npt.NDArray[np.int32]) -> npt.NDArray[np.int32]: ...
    def pixel_to_grid_for_points(self: GridMapInfoXd, pixel_points: npt.NDArray[np.int32]) -> npt.NDArray[np.int32]: ...
    def meter_to_pixel_for_points(
        self: GridMapInfoXd, meter_points: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.int32]: ...
    def pixel_to_meter_for_points(
        self: GridMapInfoXd, pixel_points: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.float64]: ...
    def grid_to_pixel_for_vectors(
        self: GridMapInfoXd, grid_vectors: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...
    def pixel_to_grid_for_vectors(
        self: GridMapInfoXd, pixel_vectors: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...
    def meter_to_pixel_for_vectors(
        self: GridMapInfoXd, meter_vectors: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.int32]: ...
    def pixel_to_meter_for_vectors(
        self: GridMapInfoXd, pixel_vectors: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.float64]: ...
    def pixel_to_index(self: GridMapInfoXd, pixel: npt.NDArray[np.int32], c_stride: bool) -> int: ...
    def index_to_pixel(self: GridMapInfoXd, index: int, c_stride: bool) -> npt.NDArray[np.int32]: ...
    def get_metric_coordinates_of_filled_metric_polygon(
        self: GridMapInfoXd, polygon_metric_vertices: npt.NDArray[np.float64]
    ) -> npt.NDArray[np.float64]: ...
    def get_grid_coordinates_of_filled_grid_polygon(
        self: GridMapInfoXd, polygon_grid_vertices: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...
    def get_pixel_coordinates_of_filled_pixel_polygon(
        self: GridMapInfoXd, polygon_pixel_vertices: npt.NDArray[np.int32]
    ) -> npt.NDArray[np.int32]: ...

class TensorDoubleXd:
    @overload
    def __init__(self: TensorDoubleXd, array: npt.NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self: TensorDoubleXd, shape: Union[npt.NDArray[np.int32], List[int]], constant: float) -> None: ...
    @overload
    def __init__(
        self: TensorDoubleXd, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.float64]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorDoubleXd, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], float]
    ) -> None: ...
    @property
    def dims(self: TensorDoubleXd) -> int: ...
    @property
    def shape(self: TensorDoubleXd) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorDoubleXd) -> int: ...
    @property
    def is_row_major(self: TensorDoubleXd) -> bool: ...
    def fill(self: TensorDoubleXd, value: float): ...
    def __setitem__(
        self: TensorDoubleXd, coords: Union[npt.NDArray[np.int32], List[int], int], value: float
    ) -> None: ...
    def __getitem__(self: TensorDoubleXd, coords: Union[npt.NDArray[np.int32], List[int], int]) -> float: ...
    def get_slice(
        self: TensorDoubleXd,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorDoubleXd: ...
    def __str__(self: TensorDoubleXd) -> str: ...

class TensorDouble3D:
    @overload
    def __init__(self: TensorDouble3D, array: npt.NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self: TensorDouble3D, shape: Union[npt.NDArray[np.int32], List[int]], constant: float) -> None: ...
    @overload
    def __init__(
        self: TensorDouble3D, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.float64]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorDouble3D, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], float]
    ) -> None: ...
    @property
    def dims(self: TensorDouble3D) -> int: ...
    @property
    def shape(self: TensorDouble3D) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorDouble3D) -> int: ...
    @property
    def is_row_major(self: TensorDouble3D) -> bool: ...
    def fill(self: TensorDouble3D, value: float): ...
    def __setitem__(
        self: TensorDouble3D, coords: Union[npt.NDArray[np.int32], List[int], int], value: float
    ) -> None: ...
    def __getitem__(self: TensorDouble3D, coords: Union[npt.NDArray[np.int32], List[int], int]) -> float: ...
    def get_slice(
        self: TensorDouble3D,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorDoubleXd: ...
    def __str__(self: TensorDouble3D) -> str: ...

class TensorDouble2D:
    @overload
    def __init__(self: TensorDouble2D, array: npt.NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self: TensorDouble2D, shape: Union[npt.NDArray[np.int32], List[int]], constant: float) -> None: ...
    @overload
    def __init__(
        self: TensorDouble2D, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.float64]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorDouble2D, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], float]
    ) -> None: ...
    @property
    def dims(self: TensorDouble2D) -> int: ...
    @property
    def shape(self: TensorDouble2D) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorDouble2D) -> int: ...
    @property
    def is_row_major(self: TensorDouble2D) -> bool: ...
    def fill(self: TensorDouble2D, value: float): ...
    def __setitem__(
        self: TensorDouble2D, coords: Union[npt.NDArray[np.int32], List[int], int], value: float
    ) -> None: ...
    def __getitem__(self: TensorDouble2D, coords: Union[npt.NDArray[np.int32], List[int], int]) -> float: ...
    def get_slice(
        self: TensorDouble2D,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorDoubleXd: ...
    def __str__(self: TensorDouble2D) -> str: ...

class TensorIntXd:
    @overload
    def __init__(self: TensorIntXd, array: npt.NDArray[np.int32]) -> None: ...
    @overload
    def __init__(self: TensorIntXd, shape: Union[npt.NDArray[np.int32], List[int]], constant: int) -> None: ...
    @overload
    def __init__(
        self: TensorIntXd, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.int32]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorIntXd, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], int]
    ) -> None: ...
    @property
    def dims(self: TensorIntXd) -> int: ...
    @property
    def shape(self: TensorIntXd) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorIntXd) -> int: ...
    @property
    def is_row_major(self: TensorIntXd) -> bool: ...
    def fill(self: TensorIntXd, value: int): ...
    def __setitem__(self: TensorIntXd, coords: Union[npt.NDArray[np.int32], List[int], int], value: int) -> None: ...
    def __getitem__(self: TensorIntXd, coords: Union[npt.NDArray[np.int32], List[int], int]) -> int: ...
    def get_slice(
        self: TensorIntXd,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorIntXd: ...
    def __str__(self: TensorIntXd) -> str: ...

class TensorInt3D:
    @overload
    def __init__(self: TensorInt3D, array: npt.NDArray[np.int32]) -> None: ...
    @overload
    def __init__(self: TensorInt3D, shape: Union[npt.NDArray[np.int32], List[int]], constant: int) -> None: ...
    @overload
    def __init__(
        self: TensorInt3D, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.int32]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorInt3D, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], int]
    ) -> None: ...
    @property
    def dims(self: TensorInt3D) -> int: ...
    @property
    def shape(self: TensorInt3D) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorInt3D) -> int: ...
    @property
    def is_row_major(self: TensorInt3D) -> bool: ...
    def fill(self: TensorInt3D, value: int): ...
    def __setitem__(self: TensorInt3D, coords: Union[npt.NDArray[np.int32], List[int], int], value: int) -> None: ...
    def __getitem__(self: TensorInt3D, coords: Union[npt.NDArray[np.int32], List[int], int]) -> int: ...
    def get_slice(
        self: TensorInt3D,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorIntXd: ...
    def __str__(self: TensorInt3D) -> str: ...

class TensorInt2D:
    @overload
    def __init__(self: TensorInt2D, array: npt.NDArray[np.int32]) -> None: ...
    @overload
    def __init__(self: TensorInt2D, shape: Union[npt.NDArray[np.int32], List[int]], constant: int) -> None: ...
    @overload
    def __init__(
        self: TensorInt2D, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.int32]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorInt2D, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], int]
    ) -> None: ...
    @property
    def dims(self: TensorInt2D) -> int: ...
    @property
    def shape(self: TensorInt2D) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorInt2D) -> int: ...
    @property
    def is_row_major(self: TensorInt2D) -> bool: ...
    def fill(self: TensorInt2D, value: int): ...
    def __setitem__(self: TensorInt2D, coords: Union[npt.NDArray[np.int32], List[int], int], value: int) -> None: ...
    def __getitem__(self: TensorInt2D, coords: Union[npt.NDArray[np.int32], List[int], int]) -> int: ...
    def get_slice(
        self: TensorInt2D,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorIntXd: ...

class TensorUnsignedXd:
    @overload
    def __init__(self: TensorUnsignedXd, array: npt.NDArray[np.uint8]) -> None: ...
    @overload
    def __init__(
        self: TensorUnsignedXd, shape: Union[npt.NDArray[np.int32], List[int]], constant: np.uint8
    ) -> None: ...
    @overload
    def __init__(
        self: TensorUnsignedXd, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.int32]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorUnsignedXd, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], np.uint8]
    ) -> None: ...
    @property
    def dims(self: TensorUnsignedXd) -> int: ...
    @property
    def shape(self: TensorUnsignedXd) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorUnsignedXd) -> int: ...
    @property
    def is_row_major(self: TensorUnsignedXd) -> bool: ...
    def fill(self: TensorUnsignedXd, value: np.uint8): ...
    def __setitem__(
        self: TensorUnsignedXd, coords: Union[npt.NDArray[np.int32], List[int], int], value: np.uint8
    ) -> None: ...
    def __getitem__(self: TensorUnsignedXd, coords: Union[npt.NDArray[np.int32], List[int], int]) -> np.uint8: ...
    def get_slice(
        self: TensorUnsignedXd,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorUnsignedXd: ...
    def __str__(self: TensorUnsignedXd) -> str: ...

class TensorUnsigned3D:
    @overload
    def __init__(self: TensorUnsigned3D, array: npt.NDArray[np.uint8]) -> None: ...
    @overload
    def __init__(
        self: TensorUnsigned3D, shape: Union[npt.NDArray[np.int32], List[int]], constant: np.uint8
    ) -> None: ...
    @overload
    def __init__(
        self: TensorUnsigned3D, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.int32]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorUnsigned3D, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], np.uint8]
    ) -> None: ...
    @property
    def dims(self: TensorUnsigned3D) -> int: ...
    @property
    def shape(self: TensorUnsigned3D) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorUnsigned3D) -> int: ...
    @property
    def is_row_major(self: TensorUnsigned3D) -> bool: ...
    def fill(self: TensorUnsigned3D, value: np.uint8): ...
    def __setitem__(
        self: TensorUnsigned3D, coords: Union[npt.NDArray[np.int32], List[int], int], value: np.uint8
    ) -> None: ...
    def __getitem__(self: TensorUnsigned3D, coords: Union[npt.NDArray[np.int32], List[int], int]) -> np.uint8: ...
    def get_slice(
        self: TensorUnsigned3D,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorUnsignedXd: ...
    def __str__(self: TensorUnsigned3D) -> str: ...

class TensorUnsigned2D:
    @overload
    def __init__(self: TensorUnsigned2D, array: npt.NDArray[np.uint8]) -> None: ...
    @overload
    def __init__(
        self: TensorUnsigned2D, shape: Union[npt.NDArray[np.int32], List[int]], constant: np.uint8
    ) -> None: ...
    @overload
    def __init__(
        self: TensorUnsigned2D, shape: Union[npt.NDArray[np.int32], List[int]], data: npt.NDArray[np.int32]
    ) -> None: ...
    @overload
    def __init__(
        self: TensorUnsigned2D, shape: Union[npt.NDArray[np.int32], List[int]], data_init_func: Callable[[], np.uint8]
    ) -> None: ...
    @property
    def dims(self: TensorUnsigned2D) -> int: ...
    @property
    def shape(self: TensorUnsigned2D) -> npt.NDArray[np.int32]: ...
    @property
    def size(self: TensorUnsigned2D) -> int: ...
    @property
    def is_row_major(self: TensorUnsigned2D) -> bool: ...
    def fill(self: TensorUnsigned2D, value: np.uint8): ...
    def __setitem__(
        self: TensorUnsigned2D, coords: Union[npt.NDArray[np.int32], List[int], int], value: np.uint8
    ) -> None: ...
    def __getitem__(self: TensorUnsigned2D, coords: Union[npt.NDArray[np.int32], List[int], int]) -> np.uint8: ...
    def get_slice(
        self: TensorUnsigned2D,
        dims_to_remove: Union[npt.NDArray[np.int32], List[int], int],
        dim_indices_at_removed: Union[npt.NDArray[np.int32], List[int], int],
    ) -> TensorUnsignedXd: ...
    def __str__(self: TensorUnsigned2D) -> str: ...

class GridMapDouble2D:
    @overload
    def __init__(self: GridMapDouble2D, grid_map_info: GridMapInfo2D) -> None: ...
    @overload
    def __init__(self: GridMapDouble2D, grid_map_info: GridMapInfo2D, value: float) -> None: ...
    @overload
    def __init__(self: GridMapDouble2D, grid_map_info: GridMapInfo2D, data: TensorDouble2D) -> None: ...
    @overload
    def __init__(self: GridMapDouble2D, grid_map_info: GridMapInfo2D, data: npt.NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self: GridMapDouble2D, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], float]) -> None: ...

    data: TensorDouble2D
    info: GridMapInfo2D

class GridMapInt2D:
    @overload
    def __init__(self: GridMapInt2D, grid_map_info: GridMapInfo2D) -> None: ...
    @overload
    def __init__(self: GridMapInt2D, grid_map_info: GridMapInfo2D, value: int) -> None: ...
    @overload
    def __init__(self: GridMapInt2D, grid_map_info: GridMapInfo2D, data: TensorInt2D) -> None: ...
    @overload
    def __init__(self: GridMapInt2D, grid_map_info: GridMapInfo2D, data: npt.NDArray[np.int32]) -> None: ...
    @overload
    def __init__(self: GridMapInt2D, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], int]) -> None: ...

    data: TensorInt2D
    info: GridMapInfo2D

class GridMapUnsigned2D:
    @overload
    def __init__(self: GridMapUnsigned2D, grid_map_info: GridMapInfo2D) -> None: ...
    @overload
    def __init__(self: GridMapUnsigned2D, grid_map_info: GridMapInfo2D, value: np.uint8) -> None: ...
    @overload
    def __init__(self: GridMapUnsigned2D, grid_map_info: GridMapInfo2D, data: TensorUnsigned2D) -> None: ...
    @overload
    def __init__(self: GridMapUnsigned2D, grid_map_info: GridMapInfo2D, data: npt.NDArray[np.uint8]) -> None: ...
    @overload
    def __init__(
        self: GridMapUnsigned2D, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], np.uint8]
    ) -> None: ...

    data: TensorUnsigned2D
    info: GridMapInfo2D

class GridMapDouble3D:
    @overload
    def __init__(self: GridMapDouble3D, grid_map_info: GridMapInfo3D) -> None: ...
    @overload
    def __init__(self: GridMapDouble3D, grid_map_info: GridMapInfo3D, value: float) -> None: ...
    @overload
    def __init__(self: GridMapDouble3D, grid_map_info: GridMapInfo3D, data: TensorDouble3D) -> None: ...
    @overload
    def __init__(self: GridMapDouble3D, grid_map_info: GridMapInfo3D, data: npt.NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self: GridMapDouble3D, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], float]) -> None: ...

    data: TensorDouble3D
    info: GridMapInfo3D

class GridMapInt3D:
    @overload
    def __init__(self: GridMapInt3D, grid_map_info: GridMapInfo3D) -> None: ...
    @overload
    def __init__(self: GridMapInt3D, grid_map_info: GridMapInfo3D, value: int) -> None: ...
    @overload
    def __init__(self: GridMapInt3D, grid_map_info: GridMapInfo3D, data: TensorInt3D) -> None: ...
    @overload
    def __init__(self: GridMapInt3D, grid_map_info: GridMapInfo3D, data: npt.NDArray[np.int32]) -> None: ...
    @overload
    def __init__(self: GridMapInt3D, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], int]) -> None: ...

    data: TensorInt3D
    info: GridMapInfo3D

class GridMapUnsigned3D:
    @overload
    def __init__(self: GridMapUnsigned3D, grid_map_info: GridMapInfo3D) -> None: ...
    @overload
    def __init__(self: GridMapUnsigned3D, grid_map_info: GridMapInfo3D, value: np.uint8) -> None: ...
    @overload
    def __init__(self: GridMapUnsigned3D, grid_map_info: GridMapInfo3D, data: TensorUnsigned3D) -> None: ...
    @overload
    def __init__(self: GridMapUnsigned3D, grid_map_info: GridMapInfo3D, data: npt.NDArray[np.uint8]) -> None: ...
    @overload
    def __init__(
        self: GridMapUnsigned3D, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], np.uint8]
    ) -> None: ...

    data: TensorUnsigned3D
    info: GridMapInfo3D

class GridMapDoubleXd:
    @overload
    def __init__(self: GridMapDoubleXd, grid_map_info: GridMapInfoXd) -> None: ...
    @overload
    def __init__(self: GridMapDoubleXd, grid_map_info: GridMapInfoXd, value: float) -> None: ...
    @overload
    def __init__(self: GridMapDoubleXd, grid_map_info: GridMapInfoXd, data: TensorDoubleXd) -> None: ...
    @overload
    def __init__(self: GridMapDoubleXd, grid_map_info: GridMapInfoXd, data: npt.NDArray[np.float64]) -> None: ...
    @overload
    def __init__(self: GridMapDoubleXd, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], float]) -> None: ...

    data: TensorDoubleXd
    info: GridMapInfoXd

class GridMapIntXd:
    @overload
    def __init__(self: GridMapIntXd, grid_map_info: GridMapInfoXd) -> None: ...
    @overload
    def __init__(self: GridMapIntXd, grid_map_info: GridMapInfoXd, value: int) -> None: ...
    @overload
    def __init__(self: GridMapIntXd, grid_map_info: GridMapInfoXd, data: TensorIntXd) -> None: ...
    @overload
    def __init__(self: GridMapIntXd, grid_map_info: GridMapInfoXd, data: npt.NDArray[np.int32]) -> None: ...
    @overload
    def __init__(self: GridMapIntXd, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], np.int32]) -> None: ...

    data: TensorIntXd
    info: GridMapInfoXd

class GridMapUnsignedXd:
    @overload
    def __init__(self: GridMapUnsignedXd, grid_map_info: GridMapInfoXd) -> None: ...
    @overload
    def __init__(self: GridMapUnsignedXd, grid_map_info: GridMapInfoXd, value: np.uint8) -> None: ...
    @overload
    def __init__(self: GridMapUnsignedXd, grid_map_info: GridMapInfoXd, data: TensorUnsignedXd) -> None: ...
    @overload
    def __init__(self: GridMapUnsignedXd, grid_map_info: GridMapInfoXd, data: npt.NDArray[np.uint8]) -> None: ...
    @overload
    def __init__(
        self: GridMapUnsignedXd, grid_map_info: GridMapInfo2D, data_init_func: Callable[[], np.uint8]
    ) -> None: ...

    data: TensorUnsignedXd
    info: GridMapInfoXd

class GridMapDrawer2D:
    def __init__(self: GridMapDrawer2D, grid_map_info: GridMapInfo2D) -> None: ...

    grid_map_info: GridMapInfo2D
    image: npt.NDArray[np.uint8]

    def reset_image(self: GridMapDrawer2D) -> None: ...
    def draw_segments_inplace(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        starts: npt.NDArray[np.float64],
        ends: npt.NDArray[np.float64],
    ) -> None: ...
    def draw_segments(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        starts: npt.NDArray[np.float64],
        ends: npt.NDArray[np.float64],
    ) -> npt.NDArray[np.uint8]: ...
    def draw_rays_inplace(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        starts: npt.NDArray[np.float64],
        ends: npt.NDArray[np.float64],
    ) -> None: ...
    def draw_rays(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        starts: npt.NDArray[np.float64],
        ends: npt.NDArray[np.float64],
    ) -> npt.NDArray[np.uint8]: ...
    def draw_polyline_inplace(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        closed: bool,
        points: npt.NDArray[np.float64],
    ) -> None: ...
    def draw_polyline(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        closed: bool,
        points: npt.NDArray[np.float64],
    ) -> npt.NDArray[np.uint8]: ...
    def draw_contour_inplace(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        contour: npt.NDArray[np.float64],
    ) -> None: ...
    def draw_contour(
        self: GridMapDrawer2D,
        mat: npt.NDArray[np.uint8],
        color: npt.NDArray[np.uint8],
        thickness: int,
        contour: npt.NDArray[np.float64],
    ) -> npt.NDArray[np.uint8]: ...
    def show_image(self: GridMapDrawer2D, title: str) -> None: ...
